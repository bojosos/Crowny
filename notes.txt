

For scripting

Have a C++ class with all static methods
Those static methods call the corresponding funcs/ctors in the Object Oriented classes
Those statis methods are added with mono_add_internal_call to runtime

Then in C# have [MethodImplOptions.InternalCall]
static extern primitive doSomething(primitive);

To get MonoString:
	if (sizeof(wchar_t) == 2)
       		return mono_string_from_utf16((mono_unichar2*)str.c_str());
	else
		return mono_string_from_utf32((mono_unichar4*)str.c_str());

then in C#
class Example
{
	Example(int i, float a)
	{
		Internal_CreateExample(x, y, z);
	}
}

Impl math in C# with Aggressive Inlining
  - Vectors
  - Transform 
  - Sphere
  - Rect

Then with internal call
  - Components
  - GetComponent - using RTTI
  - A main C# class that all script components inherit
  - Material
  - Need to store some runtime type information


Fixes:
	In all switches add a None
	Fix all .c_str()-s when using ImGui by using "%s"
	Somehow fix the cast to ImTexture

Logging when console is added
mono_add_internal_call("CulverinEditor.Debug.Debug::Log", (const void*)ConsoleLog);

Every script in c++ land has its game object stored
So in C# land when I call GetComponent<Transform> that just returns a C# transform object. Then position rotation and scale are propeties and whenever I call transform.position I just do an internal call
In C++ land I will also have a map of strings that is used for the components. Maybe use hashes or something
It will look somethin like this and will be initalized early on
["Transfrom] = typeid(Transform);
All Components will use properties that make internal calls to the C++ land
All Wrapper code will be in the CrownyWrapper project
Then in the CrownySharp project I will have all of the C# wrapper code
The Sandbox will link to that CrownySharp project
For the editor I would need to compile all C# code into an assembly and then load that assembly
But for exporting games I would need to make some sort of runtime project that loads the scripts and the engine core and does runtime things

